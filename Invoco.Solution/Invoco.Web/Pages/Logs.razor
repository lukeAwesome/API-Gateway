@page "/logs"
@inject HttpClient Http

<h3>API Logs</h3>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (logs == null)
{
    <p><em>Loading logs...</em></p>
}
else if (!logs.Any())
{
    <p><em>No logs found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Time</th>
                <th>Endpoint</th>
                <th>Status Code</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in logs)
            {
                <tr>
                    <td>@log.Time.ToLocalTime().ToString("g")</td>
                    <td>@log.Endpoint</td>
                    <td>@log.StatusCode</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ApiLogEntry>? logs;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            logs = await Http.GetFromJsonAsync<List<ApiLogEntry>>("api/logs");
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"HTTP error while fetching logs: {httpEx.Message}";
            Console.WriteLine(httpEx);
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    public class ApiLogEntry
    {
        public DateTime Time { get; set; }
        public string Endpoint { get; set; }
        public int StatusCode { get; set; }
    }
}